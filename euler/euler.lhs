Project Euler
=============

  > Project Euler is a series of challenging mathematical/computer programming
  problems that will require more than just mathematical insights to solve.
  Although mathematics will help you arrive at elegant and efficient methods,
  the use of a computer and programming skills will be required to solve most
  problems. -- http://projecteuler.net

This is my attempt at them.

Both sample input and expected answers (after they have been solved) will be
expressed as HUnit tests at the bottom of the file.

> import Test.HUnit

List functions will be used extensively.

> import List

> import Debug.Trace

Problem 1
---------

  > If we list all the natural numbers below 10 that are multiples of 3 or 5,
  we get 3, 5, 6 and 9. The sum of these multiples is 23.

  > Find the sum of all the multiples of 3 or 5 below 1000.

> eulerOne max = sum . nub $ (multiplesOf 3) ++ (multiplesOf 5)
>   where  multiplesOf x = [x,x*2..max-1]
> testsOne =
>   [ "#1 given"   ~: 23 ~=? eulerOne 10
>   , "#1 problem" ~: 233168 ~=? eulerOne 1000
>   ]

Problem 2
---------

 > Each new term in the Fibonacci sequence is generated by adding the previous two
 terms. By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 > By considering the terms in the Fibonacci sequence whose values do not
 exceed four million, find the sum of the even-valued terms.

Start by defining an efficient infinite sequence to generate Fibonacci values.

> fibonacciSequence x y = (x+y):(fibonacciSequence y (x+y))
> fibonacci = fibonacciSequence 0 1

From there, the solution is trivial.

> eulerTwo max = sum $ filter even $ takeWhile (<= max) fibonacci
> testsTwo =
>   [ "#2 test"    ~: 44      ~=? eulerTwo 40
>   , "#2 problem" ~: 4613732 ~=? eulerTwo 4000000
>   ]

Problem 3
---------

 > The prime factors of 13195 are 5, 7, 13 and 29.

 > What is the largest prime factor of the number 600851475143

First attempt, inefficient solution (~16s).

> roundedSqrt = round . sqrt . fromIntegral
> isPrime number
>   | even number = False
>   | True        = (all (\x -> rem number x /= 0) [3,5..roundedSqrt number])
> eulerThree number = last $ [x | x <- [2..max], isPrime x, rem number x == 0]
>   where max = roundedSqrt number
> testsThree =
>   [ "#2 test"    ~: 29   ~=? eulerThree 13195
>   , "#2 problem" ~: 6857 ~=? eulerThree 600851475143
>   ]

Epilogue
--------

Run all given test cases as the main function of this file.

> main = runTestTT $ TestList ( testsOne
>                            ++ testsTwo
>                            ++ testsThree
>                             )
